//
// Copyright (C) 2000 Institut fuer Telematik, Universitaet Karlsruhe
// Copyright (C) 2004,2011 Andras Varga
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//

#include "inet/applications/base/ApplicationPacket_m.h"
#include "inet/applications/basicfloodprot/BasicFloodProt.h"
#include "inet/common/ModuleAccess.h"
#include "inet/common/TagBase_m.h"
#include "inet/common/TimeTag_m.h"
#include "inet/common/lifecycle/ModuleOperations.h"
#include "inet/common/packet/Packet.h"
#include "inet/networklayer/common/FragmentationTag_m.h"
#include "inet/networklayer/common/L3AddressResolver.h"
#include "inet/transportlayer/contract/udp/UdpControlInfo_m.h"
#include "inet/networklayer/common/InterfaceTable.h"
#include "packets_m.h"
#include <iostream>
#include <algorithm>

#include "inet/mobility/contract/IMobility.h"

#include "NodeInfoSingleton.h"
#include "BandwidthTwoPoints.h"

namespace inet {

Define_Module(BasicFloodProt);

cGlobalRegistrationList nodeinfo_s("nodeinfo_s");

BasicFloodProt::~BasicFloodProt() {
    cancelAndDelete(selfMsg);
}

void BasicFloodProt::printMe() const {
    std::cout << this->getParentModule() << " > " << this << endl;
}

void BasicFloodProt::initialize(int stage) {
    ApplicationBase::initialize(stage);
    if (stage == INITSTAGE_LOCAL) {
        numSent = 0;
        numReceived = 0;
        WATCH(numSent);
        WATCH(numReceived);
        interfaceTable = getModuleFromPar<IInterfaceTable>(
                par("interfaceTableModule"), this);
        localPort = par("localPort");
        destPort = par("destPort");
        startTime = par("startTime");
        packetName = par("packetName");
        selfMsg = new cMessage("sendTimer");
        getAllEstdBw();
    }
}

void BasicFloodProt::finish() {
    recordScalar("packets sent", numSent);
    recordScalar("packets received", numReceived);
    ApplicationBase::finish();
}

void BasicFloodProt::setSocketOptions() {
    bool receiveBroadcast = par("receiveBroadcast");
    if (receiveBroadcast)
        socket.setBroadcast(true);
    socket.setCallback(this);
}

void BasicFloodProt::sendPacket() {
    Packet *packetToSend = queue.front();
    queue.pop();
    L3Address destAddr = Ipv4Address::ALLONES_ADDRESS;
    emit(packetSentSignal, packetToSend);
    socket.sendTo(packetToSend, destAddr, destPort);
    numSent++;
}

void BasicFloodProt::processStart() {
    //Iniciando app
    std::ostringstream str;
    str << packetName << "-" << numSent;
    Packet *packet = new Packet(str.str().c_str());
    const auto &payload = makeShared<PathPayload>();
    activeFlows.insert(par("flowId"));
    payload->setTarget(destAddress);
    payload->setFlowId(par("flowId"));
    payload->setChunkLength(B(par("messageLength")));
    payload->addTag<CreationTimeTag>()->setCreationTime(simTime());
    Path newPath;
    newPath.push_back(localAddress);
    payload->setPath(newPath);
    ListBandwidth *newListBw = new ListBandwidth();
    payload->setListbandwith(*newListBw);
    payload->setReqAppOut(par("reqAppOut"));
    payload->setReqAppIn(par("reqAppIn"));
    payload->setPhase(1); //PhaseInitial=1

    packet->insertAtBack(payload);
    activeFlows.insert(par("flowId"));
    queue.push(packet); // insere na fila de envios
    selfMsg->setKind(SEND);
    simtime_t d = simTime() + par("sendInterval");
    scheduleAt(d, selfMsg);
}

void BasicFloodProt::processSend() {
    sendPacket();
    if(!queue.empty()) {
        simtime_t d = simTime() + par("sendInterval");
        selfMsg->setKind(SEND);
        scheduleAt(d, selfMsg);
    }
}

void BasicFloodProt::processStop() {
    socket.close();
}

void BasicFloodProt::handleMessageWhenUp(cMessage *msg) {
    if (msg->isSelfMessage()) {
        ASSERT(msg == selfMsg);
        switch (selfMsg->getKind()) {
        case START:
            processStart();
            break;
        case SEND:
            processSend();
            break;
        default:
            throw cRuntimeError("Invalid kind %d in self message",
                    (int) selfMsg->getKind());
        }
    } else
        socket.processMessage(msg);
}

void BasicFloodProt::socketDataArrived(UdpSocket *socket, Packet *packet) {
    processPacket(packet);
}

void BasicFloodProt::socketErrorArrived(UdpSocket *socket,
        Indication *indication) {
    EV_WARN << "Ignoring UDP error report " << indication->getName() << endl;
    delete indication;
}

void BasicFloodProt::socketClosed(UdpSocket *socket) {
    if (operationalState == State::STOPPING_OPERATION)
        startActiveOperationExtraTimeOrFinish(par("stopOperationExtraTime"));
}

void BasicFloodProt::refreshDisplay() const {
    ApplicationBase::refreshDisplay();
    char buf[100];
    sprintf(buf, "rcvd: %d pks\nsent: %d pks", numReceived, numSent);
    getDisplayString().setTagArg("t", 0, buf);
}

void BasicFloodProt::processPacket(Packet *pk) {
    emit(packetReceivedSignal, pk);
    EV_INFO << "Received packet: " << UdpSocket::getReceivedPacketInfo(pk)
    << endl;
    const auto &payload2 = pk->removeAtBack();
    const Ptr<PathPayload> &result = dynamicPtrCast<PathPayload>(payload2);
    int flowId = result->getFlowId();
    L3Address target = result->getTarget();
    Path currentPath = result->getPath();
    L3Address lastNeighbourNode = currentPath.back();
    double reqAppOut = result->getReqAppOut();
    double reqAppIn = result->getReqAppIn();

    double reqApp;
    if (result->getPhase() == 1) {
        double reqApp = result->getReqAppOut();
    }
    else if (result->getPhase() == 2)
        double reqApp = result->getReqAppIn();

    ListBandwidth lstBW;
    if (mapSumBW.find(flowId) == mapSumBW.end()) { //verificar se flowId nao está no mapa
        lstBW = result->getListbandwith(); //pega lista do ultimo pacote
    }
    else {
        for (auto const& it : allEstdInfoList) {
            if (it->getLastHost() == lastNeighbourNode && it->getCurrentHost() == localAddress) {
                lstBW.push_back(*it); //senao add a lista a banda entre os dois pontos
            }
        }

    }

    simtime_t k = SIMTIME_ZERO;
    double currentBw;
    for (auto const& it : allEstdInfoList) { // recupera a banda atual
        if (it->getLastHost() == lastNeighbourNode && it->getCurrentHost() == localAddress) {
            currentBw = it->getBw();
        }
    }

    numReceived++;
    if (localAddress == target) {
        /*
        (Map existe) ?
            - Sim: (Tempo > Timer | Timer = 0) ?
                - Sim: Delete pk e encerra;
                - Não:
            - Não: Cria Map e inicia timer
        (currentBw >= reqAppOut) ?
            - Sim: timer = 0 e inicia a volta
         * */
        if (mapSumBW.find(flowId) !=mapSumBW.end()) { //#inicio (Map existe) ?
            if (simTime() > timer || timer == 0) { // # inicio(Tempo_de_simulacao > Timer | Timer = 0) ?
                delete pk;
                std::cout << "Timer: " << timer << ". Pacote deletado!" << endl;
                return;
            }
            else { //add currentBw ao Map
                mapSumBW[flowId]+= currentBw;
                std::cout << "Adicionou ao map" << endl;
            }// #fim (Tempo_de_simulacao > Timer | Timer = 0) ?
        }
        else { //Cria Map e inicia timer
            mapSumBW[flowId] = currentBw;  //cria Map
            timer = simTime() + 1; //inicia timer de 1 segundo
            std::cout <<"Tempo atual: " << simTime() << " Timer: " << timer << endl;
        } //#fim (Map existe) ?
        if (currentBw >= reqApp) { //(currentBw >= reqAppOut) ?
            if (phase ==1) timer = 0; // timer recebe 0 (reiniciado)

            //inicia volta
            std::string s = par("sourceAddress");
            par("destAddress").setStringValue(s); // alterando o destino para a origem
            par("enableSend").setBoolValue(true); // permitindo o envio de pacote
            L3Address result;
            const char *dst = par("destAddress");
            L3AddressResolver().tryResolve(dst, result);
            if (result.isUnspecified())
                EV_ERROR << "cannot resolve destination address: " << dst << endl;
            destAddress = result;
            if (localAddress != destAddress) {
                std::cout << "Caminho Percorrido: " << endl; // #inicio Imprime caminho percorrido
                std::for_each(currentPath.begin(), currentPath.end(), [](L3Address &addr) {
                    std::cout << addr << " -> ";
                });
                std::cout << localAddress << endl;
                std::cout << "***!Destino alcançado***" << endl;// #fim Imprime caminho percorrido
                std::cout << "**Banda de ida: " << currentBw << " **" << endl;
                std::cout << "*****Preparando a volta*****" << endl;
                std::cout << "Nova Origem > " << localAddress << endl;
                std::cout << "Novo Destino > " << destAddress << endl;

                std::ostringstream str;
                str << packetName << "-" << numSent;
                Packet *packet = new Packet(str.str().c_str());
                const auto &payload = makeShared<PathPayload>();
                activeFlows.insert(par("flowId"));
                payload->setTarget(destAddress);
                payload->setFlowId(par("flowId"));
                payload->setChunkLength(B(par("messageLength")));
                payload->addTag<CreationTimeTag>()->setCreationTime(simTime());
                //Path newPath(currentPath);
                Path newPath;
                newPath.push_back(localAddress);
                payload->setPath(newPath);

                payload->setListbandwith(lstBW);
                payload->setReqAppOut(reqAppOut);
                payload->setReqAppIn(reqAppIn);
                packet->insertAtBack(payload);
                activeFlows.insert(par("flowId"));
                queue.push(packet); // insere na fila de envios
                if(!selfMsg->isScheduled()) { //Se nao ha nada previsto para envio, envia
                    std::cout << "nao ha nada previsto para envio! Agendando." << endl;
                    selfMsg->setKind(SEND);
                    simtime_t d = simTime() + par("sendInterval");
                    scheduleAt(d, selfMsg);
                }
            }
        }


    }
    else { //Se node nao eh destino verifica se está no caminho entre anterior e destino
        //Verfica se o node_atual(B) está no caminho entre o node_anterior(A) e destino(C)
        if (currentPath.size()<=1) { // Se nao for origem
            Coord ownCoord = getMyPosition(); //B
            //std::cout << "host B: " << ownCoord << endl;

            Coord lastNeighbourNodeCoord, targetCoord;
            cRegistrationList *allNodesInfoList = nodeinfo_s.getInstance();
            for (int i=0; i<allNodesInfoList->size(); i++) {
                NodeInfoSingleton *nodeInfo = static_cast<NodeInfoSingleton *>(allNodesInfoList->get(i));
                if (nodeInfo->getIpaddr() == lastNeighbourNode) {
                    lastNeighbourNodeCoord = nodeInfo->getPosition(); //A
                    //std::cout << "host A: " << lastNeighbourNodeCoord << endl;
                }
                if (nodeInfo->getIpaddr() == target) {
                    targetCoord = nodeInfo->getPosition(); //C
                    //std::cout << "host C: " << targetCoord << endl;
                }

            }
            double dBC = ((ownCoord.x - targetCoord.x)*(ownCoord.x - targetCoord.x)) + ((ownCoord.y - targetCoord.y)*(ownCoord.y - targetCoord.y)) + ((ownCoord.z - targetCoord.z)*(ownCoord.z - targetCoord.z));
            double dAC = ((lastNeighbourNodeCoord.x - targetCoord.x)*(lastNeighbourNodeCoord.x - targetCoord.x)) + ((lastNeighbourNodeCoord.y - targetCoord.y)*(lastNeighbourNodeCoord.y - targetCoord.y)) + ((lastNeighbourNodeCoord.z - targetCoord.z)*(lastNeighbourNodeCoord.z - targetCoord.z));
            // Se dist de B a C maior que dist. de A a C. Significa que ponto B não está no caminho
            // Ou se nao existe banda estimada disponível entre A e B.
            if (dBC > dAC) {
                //std::cout <<"O host: " << localAddress << " nao estah no caminho" << endl;
                delete pk;
                return;
            }
            else{
                //std::cout <<"O host: " << localAddress << " estah no caminho" << endl;

                if (activeFlows.find(flowId) == activeFlows.end()) {
                    activeFlows.insert(flowId);
                    Path newPath(currentPath);
                    newPath.push_back(localAddress);
                    std::ostringstream str;
                    str << packetName << "-" << numSent;
                    Packet *packet = new Packet(str.str().c_str());
                    const auto &payload = makeShared<PathPayload>();
                    payload->setTarget(target);
                    payload->setFlowId(flowId);
                    payload->setPath(newPath);
                    payload->setChunkLength(B(par("messageLength")));
                    payload->addTag<CreationTimeTag>()->setCreationTime(simTime());

                    payload->setListbandwith(lstBW);
                    payload->setReqAppOut(reqAppOut);
                    payload->setReqAppIn(reqAppIn);
                    packet->insertAtBack(payload);
                    queue.push(packet); // insere na fila de envios
                    if(!selfMsg->isScheduled()) { //Se nao ha nada previsto para envio, envia
                        selfMsg->setKind(SEND);
                        simtime_t d = simTime() + par("sendInterval");
                        scheduleAt(d, selfMsg);
                    }
                }
            }
        }
    }

    delete pk;

}

void BasicFloodProt::handleStartOperation(LifecycleOperation *operation) {
    for (int i = 0; i < interfaceTable->getNumInterfaces(); i++) {
        L3Address addr = interfaceTable->getInterface(i)->getIpv4Address();
        L3Address loopback = Ipv4Address::LOOPBACK_ADDRESS;
        if (addr != loopback) {
            localAddress = addr;
            //Armazena as informacoes do node em variavel
            NodeInfoSingleton *ownNodeInfo = new NodeInfoSingleton();
            ownNodeInfo->setIpaddr(localAddress);
            ownNodeInfo->setPosition(getMyPosition());
            //Adiciona o node em uma lista global
            cRegistrationList *allNodesInfoList = nodeinfo_s.getInstance();
            allNodesInfoList->add(ownNodeInfo);
            if (par("enableSend")){
                std::cout << "Origem: > " << localAddress << endl;
            }
        }

    }
    socket.setOutputGate(gate("socketOut"));
    const char *localAddress = par("localAddress");
    socket.bind(
            *localAddress ?
                    L3AddressResolver().resolve(localAddress) : L3Address(),
                    localPort);
    setSocketOptions();
    if (par("enableSend")) {
        L3Address result;
        const char *dst = par("destAddress");
        L3AddressResolver().tryResolve(dst, result);
        if (result.isUnspecified())
            EV_ERROR << "cannot resolve destination address: " << dst << endl;
        destAddress = result;
        std::cout << "Destino > " << destAddress << endl;
        simtime_t start = std::max(startTime, simTime());
        selfMsg->setKind(START);
        scheduleAt(start, selfMsg);
        //host[1]
        par("destAddress").setStringValue("");
        par("enableSend").setBoolValue(false);
    }
}

void BasicFloodProt::handleStopOperation(LifecycleOperation *operation) {
    cancelEvent(selfMsg);
    socket.close();
    delayActiveOperationFinish(par("stopOperationTimeout"));
}

void BasicFloodProt::handleCrashOperation(LifecycleOperation *operation) {
    cancelEvent(selfMsg);
    socket.destroy(); //TODO  in real operating systems, program crash detected by OS and OS closes sockets of crashed programs.
}

L3Address BasicFloodProt::getMyNetAddr() const {
    return L3Address();
}

Coord BasicFloodProt::getMyPosition() const {
    cModule *node = getContainingNode(this);
    IMobility *mobilityModule = check_and_cast<IMobility*>(node->getSubmodule("mobility"));
    Coord positionNode = mobilityModule->getCurrentPosition();
    return positionNode;
}

void BasicFloodProt::getAllEstdBw() {
    //Cria a lista de hosts com a largura de banda entre eles.
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.4"),30.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.5"),10.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.6"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.7"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.8"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.9"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.2"),Ipv4Address("10.0.0.10"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.4"),Ipv4Address("10.0.0.1"),20.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.5"),Ipv4Address("10.0.0.1"),40.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.6"),Ipv4Address("10.0.0.1"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.7"),Ipv4Address("10.0.0.1"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.8"),Ipv4Address("10.0.0.1"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.9"),Ipv4Address("10.0.0.1"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.10"),Ipv4Address("10.0.0.1"),0.0);
    allEstdInfoList.push_back(estdTwoPoints);
    //volta
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.4"),Ipv4Address("10.0.0.2"),30.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.1"),Ipv4Address("10.0.0.1"),20.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.1"),Ipv4Address("10.0.0.5"),40.0);
    allEstdInfoList.push_back(estdTwoPoints);
    estdTwoPoints = new BandwidthTwoPoints(Ipv4Address("10.0.0.5"),Ipv4Address("10.0.0.2"),10.0);
    allEstdInfoList.push_back(estdTwoPoints);
}

} // namespace inet

