//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/basicfloodprot/packets.msg.
//

#ifndef __PACKETS_M_H
#define __PACKETS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class PathPayload;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include <vector>
#include "inet/networklayer/common/L3Address.h"
using namespace inet;
typedef std::vector<inet::L3Address> Path;
// }}

/**
 * Class generated from <tt>inet/applications/basicfloodprot/packets.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class PathPayload extends inet::FieldsChunk
 * {
 *     Path path;
 *     L3Address target;
 *     int flowId;
 * }
 * </pre>
 */
class INET_API PathPayload : public ::inet::FieldsChunk
{
  protected:
    Path path;
    L3Address target;
    int flowId = 0;

  private:
    void copy(const PathPayload& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PathPayload&);

  public:
    PathPayload();
    PathPayload(const PathPayload& other);
    virtual ~PathPayload();
    PathPayload& operator=(const PathPayload& other);
    virtual PathPayload *dup() const override {return new PathPayload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Path& getPath() const;
    virtual Path& getPathForUpdate() { handleChange();return const_cast<Path&>(const_cast<PathPayload*>(this)->getPath());}
    virtual void setPath(const Path& path);
    virtual const L3Address& getTarget() const;
    virtual L3Address& getTargetForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<PathPayload*>(this)->getTarget());}
    virtual void setTarget(const L3Address& target);
    virtual int getFlowId() const;
    virtual void setFlowId(int flowId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PathPayload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PathPayload& obj) {obj.parsimUnpack(b);}

#endif // ifndef __PACKETS_M_H

